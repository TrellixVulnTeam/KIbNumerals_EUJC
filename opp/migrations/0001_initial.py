# Generated by Django 2.0.5 on 2018-08-01 15:42

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last name')),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_title', models.CharField(max_length=100, verbose_name='Book title')),
                ('publication_date', models.DateField(blank=True)),
                ('authors', models.ManyToManyField(to='opp.Author')),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_number', models.PositiveIntegerField(default='0')),
                ('chapter_name', models.CharField(max_length=100, verbose_name='Chapter name')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Book')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('country_id', models.SlugField(primary_key=True, serialize=False, verbose_name='Country code')),
                ('country_name', models.CharField(max_length=500, verbose_name='Country')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_name', models.CharField(max_length=500, verbose_name='Problem name')),
                ('text', models.TextField()),
                ('template', models.CharField(max_length=500, verbose_name='Problem Template')),
                ('number_of_numeral', models.PositiveIntegerField(default=1)),
                ('number_of_steps', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ProblemNumeral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numeral_name', models.CharField(blank=True, default='a', max_length=500, verbose_name='Numeral name')),
                ('numeral_number', models.PositiveIntegerField(default=0)),
                ('question', models.TextField()),
                ('number_of_steps', models.PositiveIntegerField(default=1)),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Problem', verbose_name='Problem ID')),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publisher_name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100, verbose_name='Address')),
                ('website', models.URLField(blank=True)),
                ('country', models.ManyToManyField(to='opp.Country')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_id', models.SlugField(primary_key=True, serialize=False, verbose_name='School code')),
                ('school_name', models.CharField(max_length=500, verbose_name='School')),
            ],
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_name', models.CharField(blank=True, max_length=500, verbose_name='Step name')),
                ('step_number', models.PositiveIntegerField(default=0)),
                ('explanation', models.TextField()),
                ('video', models.CharField(max_length=500)),
                ('instruction', models.TextField()),
                ('number_of_substeps', models.PositiveIntegerField(default=0)),
                ('problem_num_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.ProblemNumeral', verbose_name='Problem Numeral ID')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_name', models.CharField(max_length=100)),
                ('number_solved_problems', models.IntegerField(default='0')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Country', verbose_name='Country name')),
                ('school', models.ManyToManyField(to='opp.School')),
            ],
        ),
        migrations.CreateModel(
            name='student_ans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=100)),
                ('text', models.CharField(max_length=100)),
                ('solucion', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('succesful_attemps', models.IntegerField(default='0')),
                ('fail_attemps', models.IntegerField(default='0')),
                ('answer_file', models.CharField(max_length=100, verbose_name='answer_file')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Problem', verbose_name='Problem ID')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Student', verbose_name='Student ID')),
            ],
        ),
        migrations.CreateModel(
            name='StudentStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('succesful_attemps', models.IntegerField(default='0')),
                ('fail_attemps', models.IntegerField(default='0')),
                ('number_of_substeps', models.IntegerField(default='0')),
                ('problem_student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.StudentProblem')),
                ('step_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Step')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.SlugField(primary_key=True, serialize=False, verbose_name='Subject code')),
                ('subject_name', models.CharField(max_length=500, verbose_name='Subject')),
                ('description', models.TextField(blank=True)),
                ('level', models.CharField(choices=[('Primary', 'Primary-school'), ('Secondary', 'Secondary-school'), ('SH', 'High-school'), ('UG', 'Undergrad'), ('Grad', 'Graduate')], max_length=100)),
                ('book', models.ManyToManyField(to='opp.Book')),
                ('chapter', models.ManyToManyField(to='opp.Chapter')),
                ('country', models.ManyToManyField(to='opp.Country')),
            ],
        ),
        migrations.CreateModel(
            name='Substep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substep_name', models.CharField(max_length=500, verbose_name='Substep name')),
                ('answer', models.TextField()),
                ('hint', models.TextField()),
                ('step_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Step', verbose_name='Step ID')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('topic_id', models.SlugField(primary_key=True, serialize=False, verbose_name='Topic ID')),
                ('topic_name', models.CharField(max_length=500, verbose_name='Topic name')),
                ('description', models.TextField(blank=True)),
                ('chapter', models.ManyToManyField(to='opp.Chapter')),
                ('subject', models.ManyToManyField(to='opp.Subject')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='topic_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Topic', verbose_name='Topic ID'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opp.Publisher'),
        ),
        migrations.AlterUniqueTogether(
            name='substep',
            unique_together={('step_id', 'substep_name')},
        ),
        migrations.AlterUniqueTogether(
            name='studentstep',
            unique_together={('problem_student_id', 'step_id')},
        ),
        migrations.AlterUniqueTogether(
            name='studentproblem',
            unique_together={('student_id', 'problem_id')},
        ),
        migrations.AlterUniqueTogether(
            name='step',
            unique_together={('problem_num_id', 'step_number')},
        ),
        migrations.AlterUniqueTogether(
            name='problemnumeral',
            unique_together={('problem_id', 'numeral_number')},
        ),
        migrations.AlterUniqueTogether(
            name='problem',
            unique_together={('topic_id', 'problem_name')},
        ),
    ]
